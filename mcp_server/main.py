# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:21:30+00:00



import argparse
import json
import os
from typing import *

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity

from models import MagneticFieldGetResponse

app = MCPProxy(
    contact={'x-twitter': 'amentumspace'},
    description='\nThe World Magnetic Model calculates the intensity and direction of the Earth\'s magnetic field on a specific date-time, geodetic altitude, latitude, and longitude. It is relied upon throughout the world for navigation, mineral exploration, atmospheric and space science, and is installed on billions of devices.  <br><br>\nA comprehensive description of the World Magnetic Model, including its  limitations, can be found <a href=\'https://www.ngdc.noaa.gov/geomag/WMM/\'>here</a>.  <br><br>\nWe provide a RESTful API to access the out-of-cycle  World Magnetic Model (WMM2015v2) valid for years 2015.0 - 2020.0 and WMM2020 valid for years 2020.0 - 2025.0<br><br>\nAPI requests must contain a key "API-Key" in the header (see code samples). Obtain a key from  <a href=\'https://developer.amentum.io\'>here</a>. <br><br> \nAmentum Pty Ltd is not responsible nor liable for any loss or damage of any sort incurred as a result of using the API. <br><br>\nHelp us improve the quality of our web APIs by completing our 2 minute survey <a href="https://www.surveymonkey.com/r/CTDTRBN">here</a>.<br><br>\nCopyright <a href=\'https://amentum.space\'>Amentum Pty Ltd</a> 2021.\n',
    title='Geomag API',
    version='1.3.0',
    servers=[{'url': '/wmm'}],
)


@app.get(
    '/magnetic_field',
    description=""" at specified conditions.
 """,
    tags=['magnetic_field_analysis'],
)
def app_api_wmm_endpoints__w_m_m_magnetic_field(
    altitude: float, latitude: float = ..., longitude: float = ..., year: float = ...
):
    """
    Calculate magnetic declination, inclination, total field intensity, and grid variation

    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
